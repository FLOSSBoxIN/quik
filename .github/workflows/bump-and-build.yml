name: Bump Feat. & Build Release
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

env:
  APK_PATH: presentation/build/outputs/apk/release/QUIK-release.apk

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.bump.outputs.version_name }}
      version_code: ${{ steps.bump.outputs.version_code }}
      release_notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # full history & tags

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq dos2unix

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version in Gradle
        id: bump
        working-directory: presentation
        run: |
          dos2unix build.gradle
          LINE=$(grep "versionName" build.gradle)
          VER=$(echo "$LINE" | sed -E "s/.*versionName ['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/")
          CODE=$(grep "versionCode" build.gradle | awk '{print $2}')
          IFS='.' read MAJ MIN PAT <<<"$VER"
          MIN=$((MIN + 1)); PAT=0
          NEW_VER="$MAJ.$MIN.$PAT"
          NEW_CODE=$((CODE + 1))
          sed -i -E "s/versionName ['\"].*['\"]/versionName '$NEW_VER'/" build.gradle
          sed -i -E "s/versionCode [0-9]+/versionCode $NEW_CODE/" build.gradle
          echo "version_name=$NEW_VER" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_CODE" >> $GITHUB_OUTPUT

      - name: Generate release notes from commits
        id: notes
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          NOTES=$(git log "$LAST_TAG"..HEAD --pretty=format:"* %s")
          echo "::set-output name=notes::$NOTES"

      - name: Update changelog.json
        run: |
          dos2unix data/src/main/assets/changelog.json
          VN=${{ steps.bump.outputs.version_name }}
          VC=${{ steps.bump.outputs.version_code }}
          NOTES="${{ steps.notes.outputs.notes }}"
          NOTES_JSON=$(printf '%s\n' "$NOTES" | jq -R . | jq -s .)
          jq \
            --arg versionName "$VN" \
            --argjson versionCode "$VC" \
            --argjson notes "$NOTES_JSON" \
            '. += [{versionName: $versionName, versionCode: $versionCode, notes: $notes}]' \
            data/src/main/assets/changelog.json > changelog.tmp.json
          mv changelog.tmp.json data/src/main/assets/changelog.json

      - name: Validate changelog.json
        run: jq . data/src/main/assets/changelog.json > /dev/null

      - name: Commit & push bump + changelog
        run: |
          BRANCH="bump/${{ steps.bump.outputs.version_name }}-${{ github.run_id }}"
          git checkout -b "$BRANCH"
          git add presentation/build.gradle data/src/main/assets/changelog.json
          git commit -m "chore: bump to ${{ steps.bump.outputs.version_name }} & update changelog [skip ci]" || exit 0
          git push --set-upstream origin "$BRANCH"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bump/${{ steps.bump.outputs.version_name }}-${{ github.run_id }}
          base: master
          title: "chore: bump to ${{ steps.bump.outputs.version_name }}"
          body: |
            ## Release ${{ steps.bump.outputs.version_name }}
            ${{ steps.notes.outputs.notes }}

  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > my-release-key.keystore

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Release APK
        run: |
          ./gradlew presentation:assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/my-release-key.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Rename APK into known path
        run: |
          mkdir -p "$(dirname "${{ env.APK_PATH }}")"
          mv presentation/build/outputs/apk/release/*.apk "${{ env.APK_PATH }}"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: QUIK-release.apk
          path: ${{ env.APK_PATH }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes from commits
        id: notes
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          git log "$LAST_TAG"..HEAD --pretty=format:"* %s" > release_notes.md
          NOTES=$(sed -e ':a;N;$!ba;s/\n/\\n/g' release_notes.md)
          echo "::set-output name=notes::$NOTES"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
