name: Bump + Release + F-Droid

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      META_YML: fdroid/metadata/dev.octoshrimpy.quik.yml
      GRADLE_FILE: presentation/build.gradle
      CHANGELOG: data/src/main/assets/changelog.json

    steps:
      # 1) Checkout full history so tags are available
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Decode your signing keystore from the secret
      - name: Decode Android keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore.p12
      
      - name: Install repo icon
        run: |
          mkdir -p repo/icons/metadata/en-US/images
          cp metadata/en-US/images/icon.png \
             repo/icons/metadata/en-US/images/icon.png

      # 3) Write a lowercase-key F-Droid config.yml from secrets
      - name: Write F-Droid config.yml
        run: |
          cat > config.yml <<EOF
          repo_keystore: keystore.p12
          keystorepass: ${{ secrets.KEYSTORE_PASSWORD }}
          repo_keyalias: ${{ secrets.KEY_ALIAS }}
          keypass: ${{ secrets.KEY_PASSWORD }}
          repo_icon: metadata/en-US/images/icon.png
          EOF

      # 4) Install fdroidserver & bump metadata.yml non-interactively
      - name: Set up Python & fdroidserver
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Bump F-Droid metadata
        run: |
          pip3 install fdroidserver
          fdroid update

      # 5) Commit F-Droid metadata.yml
      - name: Commit F-Droid metadata.yml
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$META_YML"
          git diff --quiet --cached || git commit -m "chore: bump F-Droid metadata"

      # 6) Set up Java & jq for the rest
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 7) Bump Android versions & capture NEW_CODE/NEW_NAME
      - name: Bump Android version & update build.gradle
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          current_code=$(grep -E '^[[:space:]]*versionCode ' "$GRADLE_FILE" | awk '{print $2}')
          current_name=$(grep -E '^[[:space:]]*versionName ' "$GRADLE_FILE" \
            | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          new_code=$((current_code + 1))
          IFS='.' read -r major minor patch <<< "$current_name"
          new_name="${major}.$((minor + 1)).0"
          sed -i \
            -e "s|^[[:space:]]*versionCode[[:space:]]\+$current_code|versionCode $new_code|" \
            -e "s|^[[:space:]]*versionName[[:space:]]\+'$current_name'|versionName '$new_name'|" \
            "$GRADLE_FILE"
          echo "NEW_CODE=$new_code" >> "$GITHUB_ENV"
          echo "NEW_NAME=$new_name" >> "$GITHUB_ENV"
          echo "âœ… Bumped to versionCode $new_code, versionName $new_name"

      # 8) Gather commits & prepend to changelog.json
      - name: Update changelog.json & write F-Droid txt
        shell: bash
        run: |
          set -euo pipefail
          prev_tag="v${NEW_NAME}"
          if git rev-parse --verify --quiet "$prev_tag" >/dev/null; then
            base="$prev_tag"
          else
            base=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "")
          fi
          [[ -n "$base" ]] && range="$base..HEAD" || range="HEAD"
          mapfile -t commits < <(
            git log --no-merges --reverse --pretty=format:"%s by %an" $range \
              | sed -E 's/[[:space:]]*\.*[[:space:]]+by/ by/' \
              | sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//' \
              | awk '!seen[$0]++'
          )
          if (( ${#commits[@]} )); then
            changes_json=$(printf '%s\n' "${commits[@]}" | jq -R . | jq -s .)
          else
            changes_json="[]"
          fi
          jq --argjson changes "$changes_json" \
             --arg vc "$NEW_CODE" \
             --arg vn "$NEW_NAME" \
             '
             def capfirst: sub("^(.)"; "\(ascii_upcase(.1))");
             $all := ($changes | map(capfirst));
             $fixes := $all | map(select(test("^(Fix|fix)")));
             $others := $all | map(select(test("^(Fix|fix)") | not));
             . = [{
               versionCode: ($vc|tonumber),
               versionName: $vn,
               fixes: $fixes,
               changes: $others
             }] + .
             ' \
             "$CHANGELOG" > tmp && mv tmp "$CHANGELOG"
          mkdir -p fdroid/metadata
          out="fdroid/metadata/${NEW_CODE}.txt"
          {
            echo "Changes in ${NEW_NAME} (${NEW_CODE}):"
            echo
            for c in "${commits[@]}"; do echo "- $c"; done
          } > "$out"

      # 9) Commit all metadata, changelog & build.gradle
      - name: Commit version & changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$GRADLE_FILE" "$CHANGELOG" fdroid/metadata/"${NEW_CODE}".txt
          git diff --quiet --cached || git commit -m "chore: bump to ${NEW_NAME} (${NEW_CODE})"
          git push

      # 10) Build the APK (using the same keystore.p12)
      - name: Build release APK
        run: |
          chmod +x ./gradlew
          ./gradlew clean :presentation:assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.p12 \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      # 11) Tag & push
      - name: Tag new release
        run: |
          git tag "v${NEW_NAME}"
          git push origin "v${NEW_NAME}"

      # 12) Publish GitHub Release & upload APK
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${NEW_NAME}"
          files: presentation/build/outputs/apk/release/*-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 13) Cleanup signing material
      - name: Cleanup keystore/config
        if: always()
        run: |
          shred --remove keystore.p12 config.yml
